REGULAR EXPRESSION:

	A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. They can be used to search, edit, or manipulate text and data.

**METHOD:

	A Java method is a collection of statements that are grouped together to perform an operation.A method definition consists of a method header and a method body. Here are all the parts of a method:

*Modifiers: 
	The modifier, which is optional, tells the compiler how to call the method. This defines the access type of the method.

*Return Type: 
	A method may return a value. The returnValueType is the data type of the value the method returns. Some methods perform the desired operations without returning a value. In this case, the returnValueType is the keyword void.

*Method Name: 
	This is the actual name of the method. The method name and the parameter list together constitute the method signature.

*Parameters:
	 A parameter is like a placeholder. When a method is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a method. Parameters are optional; that is, a method may contain no parameters.

*Method Body:
	 The method body contains a collection of statements that define what the method does.

*Calling a Method:
In creating a method, you give a definition of what the method is to do. To use a method, you have to call or invoke it. There are two ways to call a method; the choice is based on whether the method returns a value or not.

RETURN METHOD:
   }
   public int add() 
   {
      int a=9;
      int b=5;
      return a+b;
   }
}


The void Keyword:
This section shows how to declare and invoke a void method.

Example:
public class A {

   public void add()
    {
    	int a=8;
    	int b=8;
     System.out.println(a+b);
      
   }


Passing Parameters by Values:
When calling a method, you need to provide arguments, which must be given in the same order as their respective parameters in the method specification. This is known as parameter order association.

Example:


public class A
{


   public static void main(String[] args) 
   {
   	add(9,68);
   	email("shahid",01);
      
   }
   
   static void add(int n1, int n2) 
   {
      
      System.out.println(n1+n2);
      }
      static void email(String e,int f)
      {
      system.out.println(e+f);
      }
    
Overloading Methods:

public static double max(double num1, double num2) {
  if (num1 > num2)
    return num1;
  else
    return num2;
}
	If you call max with int parameters, the max method that expects int parameters will be invoked; if you call max with double parameters, the max method that expects double parameters will be invoked. This is referred to as method overloading; that is, two methods have the same name but different parameter lists within one class.

	The Java compiler determines which method is used based on the method signature. Overloading methods can make programs clearer and more readable. Methods that perform closely related tasks should be given the same name.

	Overloaded methods must have different parameter lists. You cannot overload methods based on different modifiers or return types. 

*The Scope of Variables:
	The scope of a variable is the part of the program where the variable can be referenced. A variable defined inside a method is referred to as a local variable.

	The scope of a local variable starts from its declaration and continues to the end of the block that contains the variable. A local variable must be declared before it can be used.

	A parameter is actually a local variable. The scope of a method parameter covers the entire method.

	A variable declared in the initial action part of a for loop header has its scope in the entire loop. But a variable declared inside a for loop body has its scope limited in the loop body from its declaration to the end of the block that contains the variable as shown below:

Java Variable Scope
	You can declare a local variable with the same name multiple times in different non-nesting blocks in a method, but you cannot declare a local variable twice in nested blocks.

Using Command-Line Arguments:
	Sometimes you will want to pass information into a program when you run it. This is accomplished by passing command-line arguments to main( ).

	A command-line argument is the information that directly follows the program's name on the command line when it is executed. To access the command-line arguments inside a Java program is quite easy.they are stored as strings in the String array passed to main( ).

Example:
	The following program displays all of the command-line arguments that it is called with:

public class CommandLine {

   public static void main(String args[]){ 
      for(int i=0; i<args.length; i++){
         System.out.println("args[" + i + "]: " + args[i]);
      }
   }
}
Try executing this program as shown here:

java CommandLine this is a command line 200 -100
This would produce the following result:

args[0]: this
args[1]: is
args[2]: a
args[3]: command
args[4]: line
args[5]: 200
args[6]: -100
**The Constructors:
	A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.

	Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other startup procedures required to create a fully formed object.

	All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.

Example:
class MyClass {
   int x;
   
   MyClass() {
      x = 10;
   }
}

public class ConsDemo {

   public static void main(String args[]) {
      MyClass t1 = new MyClass();
      MyClass t2 = new MyClass();
      System.out.println(t1.x + " " + t2.x);
   }
}

Example:
Here is a simple example that uses a constructor:

class MyClass {
   int x;
   
   MyClass(int i ) 
   {
      x = i;
   }
}

public class ConsDemo {

   public static void main(String args[]) {
      MyClass t1 = new MyClass( 10 );
      MyClass t2 = new MyClass( 20 );
      System.out.println(t1.x + " " + t2.x);
   }
}
This would produce the following result:

10 20
*Variable Arguments(var-args):
	JDK 1.5 enables you to pass a variable number of arguments of the same type to a method. The parameter in the method is declared as follows:
	typeName... parameterName
	In the method declaration, you specify the type followed by an ellipsis (...) Only one variable-length parameter may be specified in a method, and this parameter must be the last parameter. Any regular parameters must precede it.

Example:
public class VarargsDemo {

   public static void main(String args[]) {
      // Call method with variable args  
	  printMax(34, 3, 3, 2, 56.5);
      printMax(new double[]{1, 2, 3});
   }

   public static void printMax( double... numbers) {
   if (numbers.length == 0) {
      System.out.println("No argument passed");
      return;
   }

   double result = numbers[0];

   for (int i = 1; i <  numbers.length; i++)
      if (numbers[i] >  result)
      result = numbers[i];
      System.out.println("The max value is " + result);
   }
}
This would produce the following result:

The max value is 56.5
The max value is 3.0
**The finalize( ) Method:
	It is possible to define a method that will be called just before an object's final destruction by the garbage collector. This method is called finalize( ), and it can be used to ensure that an object terminates cleanly.For example, you might use finalize( ) to make sure that an open file owned by that object is closed.To add a finalizer to a class, you simply define the finalize( ) method. The Java runtime calls that method whenever it is about to recycle an object of that class.Inside the finalize( ) method, you will specify those actions that must be performed before an object is destroyed.The finalize( ) method has this general form:

protected void finalize( )
{
   // finalization code here
}Here, the keyword protected is a specifier that prevents access to finalize( ) by code defined outside its class.

This means that you cannot know when or even if finalize( ) will be executed. For example, if your program ends before garbage collection occurs, finalize( ) will not execute.

