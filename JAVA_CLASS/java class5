**ESCAPE SEQUENCES:

	A character preceded by a backslash (\) is an escape sequence and has special meaning to the compiler.

	Following table shows the Java escape sequences:

	\t	Inserts a tab in the text at this point.
	\b	Inserts a backspace in the text at this point.
	\n	Inserts a newline in the text at this point.
	\r	Inserts a carriage return in the text at this point.
	\f	Inserts a form feed in the text at this point.
	\'	Inserts a single quote character in the text at this point.
	\"	Inserts a double quote character in the text at this point.
	\\	Inserts a backslash character in the text at this point.

Example:
	If you want to put quotes within quotes you must use the escape sequence, \", on the interior quotes:

public class Test {

   public static void main(String args[]) {
      System.out.println("She said \"Hello!\" to me.");
   }
}
	This would produce the following result:
	She said "Hello!" to me.

**CHARACTER METHOD:

*isLetter()
	Determines whether the specified char value is a letter.
*toLowerCase()
	Returns the lowercase form of the specified char value.

**NUMBER METHOD:

*parseInt()
	This method is used to get the primitive data type of a certain String.
*random()
	Returns a random number.
*compareTo()
	Compares this Number object to the argument.

**STRING:

	The Java platform provides the String class to create and manipulate strings.

*Creating Strings:
	The most direct way to create a string is to write:
	String greeting = "Hello world!";

	As with any other object, you can create String objects by using the new keyword and a constructor. The String class has eleven constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.

public class StringDemo{

   public static void main(String args[]){
      char[] a = { 'h', 'e', 'l', 'l', 'o', '.'};
      String x = new String(a);  
      System.out.println(x);
   }
}
	This would produce the following result:
	hello.
	Note: The String class is immutable, so that once it is created a String object cannot be changed. If there is a necessity to make a lot of modifications to Strings of characters, then you should use String Buffer & String Builder Classes.

**CONCATENATING STRING:

	The String class includes a method for concatenating two strings:

	string1.concat(string2);
	This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in:

	"My name is ".concat("Zara");
	Strings are more commonly concatenated with the + operator, as in:

	"Hello," + " world" + "!"
	which results in:
	"Hello, world!"

	example:

public class StringDemo {

   public static void main(String args[]) {
      String string1 = "saw I was ";
      System.out.println("Dot " + string1 + "Tod");
   }
}
This would produce the following result: Dot saw I was Tod

**String Length:
	Methods used to obtain information about an object are known as accessor methods. One accessor method that you can use with strings is the length() method, which returns the number of characters contained in the string object.After the following two lines of code have been executed, len equals 17:

public class StringDemo {

   public static void main(String args[]) {
      String palindrome = "Dot saw I was Tod";
      int len = palindrome.length();
      System.out.println( "String Length is : " + len );
   }
}
This would produce the following result: String Length is : 17

** STRING BUILT IN METHOD:

	*int length() 
		Returns the length of this string.
	*boolean equals(Object anObject)
		Compares this string to the specified object.
	*boolean equalsIgnoreCase(String anotherString)
		Compares this String to another String, ignoring case considerations.
	*String toLowerCase()
		Converts all of the characters in this String to lower case using the rules of the default locale.

**Declaring Array Variables:

Syntex: dataType[] arrayRefVar;   // preferred way.

Example:

double[] myList;         // preferred way.

Creating Arrays:
You can create an array by using the new operator with the following syntax:

arrayRefVar = new dataType[arraySize];

dataType[] arrayRefVar = new dataType[arraySize];
Alternatively you can create arrays as follows:

dataType[] arrayRefVar = {value0, value1, ..., valuek};

Example:

double[] myList = new double[10];
int[] a={6,8,4,9,5};

