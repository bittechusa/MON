**STREAMS, FILES AND I/O

*STREAM:A stream can be defined as a sequence of data. The InputStream is used to read data from a source and the OutputStream is used for writing data to a destination.

**Reading Characters from Console:
	
	To read a character from a BufferedReader, we would read( ) method whose sytax is as follows:

	int read( ) throws IOException
	Each time that read( ) is called, it reads a character from the input stream and returns it as an integer value.It can throw an IOException.The following program demonstrates read( ) by reading characters from the console until the user types a "q":

	import java.io.*;
	public class BRRead 
	{
    public static void main(String args[]) throws IOException
   	{
      char c; // Create a BufferedReader using System.in
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      System.out.println("Enter characters, 'q' to quit."); // read characters
      do {
         c = (char) br.read();
         System.out.println(c);
      } while(c != 'q');
   }
}
	Here is a sample run:
	Enter characters, 'q' to quit.
	123abcq

**Reading Strings from Console:
	
	To read a string from the keyboard, use the version of readLine( ) that is a member of the BufferedReader class. Its general form is shown here:

	String readLine( ) throws IOException
	The following program demonstrates BufferedReader and the readLine( ) method. The program reads and displays lines of text until you enter the word "end":

	// Read a string from console using a BufferedReader.
	import java.io.*;
	public class BRReadLines 
	{
    	public static void main(String args[]) throws IOException
   		{
      // Create a BufferedReader using System.in
      BufferedReader br = new BufferedReader(new
                              InputStreamReader(System.in));
      String str;
      System.out.println("Enter lines of text.");
      System.out.println("Enter 'end' to quit.");
      do {
         str = br.readLine();
         System.out.println(str);
      } while(!str.equals("end"));
   }
}
Here is a sample run:

Enter lines of text.
Enter 'end' to quit.
This is line one
This is line one
This is line two
This is line two
end
end

**Writing Console Output:
	
	Console output is most easily accomplished with print( ) and println( ), described earlier. These methods are defined by the class PrintStream which is the type of the object referenced by System.out
	Because PrintStream is an output stream derived from OutputStream, it also implements the low-level method write( ). The simplest form of write( ) defined by PrintStream is shown here:

import java.io.*;

// Demonstrate System.out.write().
public class WriteDemo {
   public static void main(String args[]) {
      int b; 
      b = 'A';
      System.out.write(b);
      System.out.write('\n');
   }
}


**Reading and Writing Files:

	A stream can be defined as a sequence of data. The InputStream is used to read data from a source and the OutputStream is used for writing data to a destination.Here is a hierarchy of classes to deal with Input and Output streams.

**Java I/O Streams:
	The two important streams are FileInputStream and FileOutputStream, which would be discussed here:

1.FileInputStream:
	This stream is used for reading data from the files. Objects can be created using the keyword new and there are several types of constructors available.Following constructor takes a file name as a string to create an input stream object to read the file.:

	InputStream f = new FileInputStream("C:/java/hello");
	Following constructor takes a file object to create an input stream object to read the file. First we create a file object using File() method as follows:
	File f = new File("C:/java/hello");
	InputStream f = new FileInputStream(f);
	Once you have InputStream object in hand, then there is a list of helper methods which can be used to read to stream or to do other operations on the stream.

1.	public void close() throws IOException{}
		This method closes the file output stream. Throws an IOException
2.	protected void finalize()throws IOException {}
		This method cleans up the connection to the file. Throws an IOException.
3.	public int read(int r)throws IOException{}
		This method reads the specified byte of data from the InputStream. Returns an int. Returns the next byte of data and -1 will be returned if it's end of file.
4.	public int read(byte[] r) throws IOException{}
		This method reads r.length bytes from the input stream into an array. Returns the total number of bytes read. If end of file -1 will be returned.
5.	public int available() throws IOException{}
		Gives the number of bytes that can be read from this file input stream. Returns an int.

**FileOutputStream:
	FileOutputStream is used to create a file and write data into it.

1. Following constructor takes a file name as a string to create an 		input stream object to write the file:

	OutputStream f = new FileOutputStream("C:/java/hello") 
2.Following constructor takes a file object to create an output stream 		object to write the file. First, we create a file object using File(	) method as follows:

	File f = new File("C:/java/hello");
	OutputStream f = new FileOutputStream(f);
	Once you have OutputStream object in hand, then there is a list of helper methods, which can be used to write to streamor operation.

1.	public void close() throws IOException{}
		This method closes the file output stream.
2.	protected void finalize()throws IOException {}
		This method cleans up the connection to the file. Ensures that the close method called when no more reference in files.
3.	public void write(int w)throws IOException{}
		This methods writes the specified byte to the output stream.
4	public void write(byte[] w)
		Writes w.length bytes from the mentioned byte array to the OutputStream.

Example:
Following is the example to demonstrate InputStream and OutputStream:

import java.io.*;

public class fileStreamTest{

   public static void main(String args[]){
   
   try{
      byte bWrite [] = {11,21,3,40,5};
      OutputStream os = new FileOutputStream("test.txt");
      for(int x=0; x < bWrite.length ; x++){
         os.write( bWrite[x] ); // writes the bytes
      }
      os.close();
     
      InputStream is = new FileInputStream("test.txt");
      int size = is.available();

      for(int i=0; i< size; i++){
         System.out.print((char)is.read() + "  ");
      }
      is.close();
   }catch(IOException e){
      System.out.print("Exception");
   }	
   }
}
The above code would create file test.txt and would write given numbers in binary format. Same would be output on the stdout screen.

**File Navigation and I/O:

	There are several other classes that we would be going through to get to know the basics of File Navigation and I/O.

		1.File Class
		2.FileReader Class
		3.FileWriter Class