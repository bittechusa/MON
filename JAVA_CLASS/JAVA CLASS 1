**Java overview:
**History:James Gosling initiated the Java language project in June 1991 for use in one of his many set-top box projects. 

**Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere.

##JAVA IS:
OBJECT ORIENTED:In Java, everything is an Object. Java can be easily  		extended since it is based on the Object model.
Platform independent: Unlike many other programming languages including 	C and C++, when Java is compiled, it is not compiled into platform 		specific machine, rather into platform independent byte code. This 		byte code is distributed over the web and interpreted by virtual 		Machine (JVM) on whichever platform it is being run.
SIMPLE:
INTERPRETED
HIGH PERFORMANCE
DYNAMIC
	##ENVIRONMENT SETUP:http://www.tutorialspoint.com/java/java_environment_setup.htm

	##BASIC SYNTEX:Case Sensitivity - Java is case sensitive, which means identifier Hello and hello would have different meaning in Java.
**CLASS NAME : 
	For all class names the first letter should be in Upper Case. 
**METHOD NAME :
 	All method names should start with a Lower Case letter. 
**PROGRAM FILES NAME :
	 Name of the program file should exactly match the class name. 
##OBJECT :
	 Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors -wagging, barking, eating. An object is an instance of a class.

CLASS :
	 A class can be defined as a template/ blue print that describes the behaviors/states that object of its type support.

METHODS :
	 A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.

INSTANCE VARIABLES :
 	 Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables

##DATA TYPE AND VARIABLE:

PRIMITIVE DATA TYPES:
	There are eight Primitivee data types supported by Java. Primitive data types are predefined by the language and named by a keyword. Let us now look into detail about the eight primitive data types.

BYTE:
	Byte data type is an 8-bit signed two's complement integer.
	Minimum value is -128 (-2^7)
	Maximum value is 127 (inclusive)(2^7 -1)
	Default value is 0
	Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.
Example: byte a = 100 , byte b = -50

SHORT:
	Short data type is a 16-bit signed two's complement integer.
	Minimum value is -32,768.
	Maximum value is 32,767 (inclusive).
	Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int
	Default value is 0.
Example: short s = 10000, short r = -20000

INTEGER:
	Int data type is a 32-bit signed two's complement integer.
	Minimum value is - 2,147,483,648.
	Maximum value is 2,147,483,647(inclusive).
	Int is generally used as the default data type for integral values unless there is a concern about memory.
	The default value is 0
Example: int a = 100000, int b = -200000

LONG:
	Long data type is a 64-bit signed two's complement integer.
	Minimum value is -9,223,372,036,854,775,808.(-2^63)
	Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)
	This type is used when a wider range than int is needed
Example: long a = 100000L, int b = -200000L

FLOAT:
	Float data type is a single-precision 32-bit IEEE 754 floating point
	Float is mainly used to save memory in large arrays of floating pointnumbers.
Example: float f1 = 234.5f

DOUBLE:
	double data type is a double-precision 64-bit IEEE 754 floating point.
	This data type is generally used as the default data type for decimal values, generally the default choice.
	Default value is 0.0d.	
Example: double d1 = 123.4

BOOLEAN:
	boolean data type represents one bit of information.
	There are only two possible values: true and false.
	Default value is false.
Example: boolean one = true

CHARACTER:
	char data type is a single 16-bit Unicode character.
	Char data type is used to store any character.
Example: char letterA ='A'

REFERENCE DATA TYPE:
	Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy etc.
	Class objects, and various type of array variables come under reference data type.
	Default value of any reference variable is null.
	A reference variable can be used to refer to any object of the declared type or any compatible type.

##VARIABLE TYPE:

	LOCAL VARIABLES:
	Local variables are declared in methods, constructors, or blocks	Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor or block.
	Access modifiers cannot be used for local variables.
	Local variables are visible only within the declared method, constructor or block.
	There is no default value for local variables so local variables should be declared and an initial value should be assigned before the first use.

INSTANCE VARIABLES:
	Instance variables are declared in a class, but outside a method, constructor or any block.
	Instance variables are created when an object is created with the use of the keyword 'new' and destroyed when the object is destroyed.
	Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object's state that must be present throughout the class.
	Access modifiers can be given for instance variables.
	The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level).
	Instance variables have default values. For numbers the default value is 0, for Booleans it is false and for object references it is null. Values can be assigned during the declaration or within the constructor.
	Instance variables can be accessed directly by calling the variable name inside the class. However within static methods and different class ( when instance variables are given accessibility) should be called using the fully qualified name . ObjectReference.VariableName

CLASS/STATIC VARIABLES:
	Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block.
	There would only be one copy of each class variable per class, regardless of how many objects are created from it.
	Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final and static. Constant variables never change from their initial value.
	Static variables are stored in static memory. It is rare to use static variables other than declared final and used as either public or private constants.
	Static variables are created when the program starts and destroyed when the program stops.
	Static variables can be accessed by calling with the class name . ClassName.VariableName.
	When declaring class variables as public static final, then variables names (constants) are all in upper case. If the static variables are not public and final the naming syntax is the same as instance and local variables.
Example: Animal animal = new Animal("giraffe");

